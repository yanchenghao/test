{
  "uid" : "40929d6ab236e7b9",
  "name" : "test_login[pam10]",
  "fullName" : "testcase.login#test_login",
  "historyId" : "d8106725fc93d2d94eb3cf4e96d470c3",
  "time" : {
    "start" : 1639140342199,
    "stop" : 1639140342200,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "TypeError: request() got an unexpected keyword argument 'http_method'",
  "statusTrace" : "pam1 = {'code': 1, 'pam': {'countryPhoneCode': '1', 'password': '6d9597d054fab29693d255612e67bd6c', 'phone': '2565555555'}}\n\n    @pytest.mark.parametrize(\"pam1\", yaml_loader.yaml_get(\"./data/test.yaml\"))\n    # pam1=yaml_loader.yaml_get()\n    def test_login(pam1):\n    \t# pams=pam1[0]\n    \tprint(pam1)\n    \tprint(type(pam1))\n    \tpams=pam1[\"pam\"]\n    \tprint(pams)\n>   \tr1=request1.request(url1,headers=header,json=pams,timeout=5,verify=False,http_method=\"post\")\n\ntestcase\\login.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\http_requests.py:9: in request\n    red = requests.post(url,headers=headers,data=data,json=json,http_method=http_method,timeout=timeout,verify=verify,cookies=cookie)\nD:\\Users\\tn_chenghao.yan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\requests\\api.py:117: in post\n    return request('post', url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'post', url = 'https://api.molelive.com/api/user/snackUser/login'\nkwargs = {'cookies': None, 'data': None, 'headers': {'accept-encoding': 'gzip', 'appplatform': '1', 'appversioncode': '2', 'appversionname': '1.0', ...}, 'http_method': 'post', ...}\nsession = <requests.sessions.Session object at 0x0000015D4F4088E0>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'http_method'\n\nD:\\Users\\tn_chenghao.yan\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\requests\\api.py:61: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "login"
  }, {
    "name" : "host",
    "value" : "CYHD-L-0025"
  }, {
    "name" : "thread",
    "value" : "28728-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "pam1",
    "value" : "{'pam': {'countryPhoneCode': '1', 'password': '6d9597d054fab29693d255612e67bd6c', 'phone': '2565555555'}, 'code': 1}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "40929d6ab236e7b9.json",
  "parameterValues" : [ "{'pam': {'countryPhoneCode': '1', 'password': '6d9597d054fab29693d255612e67bd6c', 'phone': '2565555555'}, 'code': 1}" ]
}